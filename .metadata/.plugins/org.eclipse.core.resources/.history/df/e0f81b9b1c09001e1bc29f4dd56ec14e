package com.project.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.exception.NoAlbumFoundException;
import com.project.model.MusicEntity;
import com.project.repository.MusicRepository;
import com.project.service.MusicService;

@RestController
@RequestMapping("/music")
public class MusicController {
	@Autowired
	private MusicService musicService;

	@GetMapping("/search/title/{musicTitle}") 
	public ResponseEntity<List<MusicEntity>> getMusicByName(@PathVariable String musicTitle)throws NoAlbumFoundException {
		return ResponseEntity.ok().body(musicService.getMusicByName(musicTitle));

	}

	@GetMapping("/search/genre/{musicGenre}") 
	public ResponseEntity<List<MusicEntity>> getMusicByGenre(@PathVariable String musicGenre)throws NoAlbumFoundException {
		List<MusicEntity> music = musicService.getMusicByGenre(musicGenre);

		if (music.isEmpty()) {
			throw new NoAlbumFoundException("noo");
			//return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			
		
			return new ResponseEntity<>(music, HttpStatus.OK);
		}
	}

	@GetMapping("/search/artist/{musicArtist}")
	public ResponseEntity<List<MusicEntity>> getMusicByArtist(@PathVariable String musicArtist)throws NoAlbumFoundException {
		List<MusicEntity> music = musicService.getMusicByArtist(musicArtist);

		if (music.isEmpty()) {
			//return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new NoAlbumFoundException("no artist");
			
		} else {
			return new ResponseEntity<>(music, HttpStatus.OK);
		}
	}

	@GetMapping("/search/year/{musicYear}")
	public ResponseEntity<List<MusicEntity>> getMusicByYear(@PathVariable Long musicYear) throws NoAlbumFoundException {
		List<MusicEntity> music = musicService.getMusicByYear(musicYear);

		if (music.isEmpty()) {
			//return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			throw new NoAlbumFoundException("nO YEAR FOUND");
			
		} else {
			return new ResponseEntity<>(music, HttpStatus.OK);
			
		}
	}

	@PutMapping("/update/{musicId}")
	public ResponseEntity<MusicEntity> updateMusic(@RequestBody MusicEntity musicEntity) {
		MusicEntity music = musicService.updateMusic(musicEntity);

		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("/delete/{musicId}")
	public ResponseEntity<?> deleteMusic(@PathVariable int musicId) {
		return ResponseEntity.ok().body(musicService.deleteMusic(musicId));

	}
	@PostMapping("/create")
	public ResponseEntity<MusicEntity> createMusic(@RequestBody MusicEntity music) {
		MusicEntity savedMusic = musicService.saveMusic(music);
		return new ResponseEntity<>(savedMusic, HttpStatus.CREATED);
	}

}