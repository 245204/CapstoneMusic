package com.project.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.model.MusicEntity;
import com.project.repository.MusicRepository;
import com.project.service.MusicService;

@RestController
@RequestMapping("/music")
public class MusicController {

	/*
	 * @Autowired MusicRepository repo;
	 * 
	 * 
	 * //to get all the details
	 * 
	 * @GetMapping("/search") public ResponseEntity<List<MusicEntity>> showall(){
	 * return new ResponseEntity<List<MusicEntity>>(repo.findAll(),HttpStatus.OK); }
	 * 
	 * //to get details based on the id
	 * 
	 * @GetMapping("/search/{id}") public ResponseEntity<?> get(@PathVariable int
	 * id) { Optional<MusicEntity> dup=repo.findById(id); if(dup.isPresent()) {
	 * return ResponseEntity.status(HttpStatus.FOUND).body(dup); }else { return
	 * null; } }
	 * 
	 * @PostMapping("/create") public ResponseEntity<?> create(@RequestBody
	 * MusicEntity musicEntity) { MusicEntity dup=new
	 * MusicEntity(musicEntity.getMusicId(),musicEntity.getMusicArtist(),musicEntity
	 * .getMusicTitle(),musicEntity.getMusicGenre(),musicEntity.getMusicYear(),
	 * musicEntity.getMusicDescription()); return
	 * ResponseEntity.status(HttpStatus.CREATED).body(repo.save(dup)); } }
	 */
	@Autowired
	private MusicService musicService;

	@PostMapping("/create")
	public ResponseEntity<MusicEntity> createMusic(@RequestBody MusicEntity music) {
		MusicEntity savedMusic = musicService.saveMusic(music);
		return new ResponseEntity<>(savedMusic, HttpStatus.CREATED);
	}

	@GetMapping("/search/{musicId}")
	public ResponseEntity<MusicEntity> getMusicById(@PathVariable int musicId) {
		MusicEntity music = musicService.getMusicById(musicId);
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/search")
	public ResponseEntity<List<MusicEntity>> getAllMusic() {
		List<MusicEntity> musicList = musicService.getAllMusic();
		return new ResponseEntity<>(musicList, HttpStatus.OK);
	}
	
	@GetMapping("/search/{musicTitle}")
	public ResponseEntity<MusicEntity> getMusicByName(@PathVariable String musicTitle) {
		//MusicEntity music = musicService.getMusicById(musicId);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

// Other endpoints related to music functionality
// ...
}
