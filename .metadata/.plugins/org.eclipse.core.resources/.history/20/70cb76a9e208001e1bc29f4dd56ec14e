package com.project.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.model.MusicEntity;
import com.project.repository.MusicRepository;
import com.project.service.MusicService;

@RestController
@RequestMapping("/music")
public class MusicController {
	@Autowired
	private MusicService musicService;

	@PostMapping("/create")
	public ResponseEntity<MusicEntity> createMusic(@RequestBody MusicEntity music) {
		MusicEntity savedMusic = musicService.saveMusic(music);
		return new ResponseEntity<>(savedMusic, HttpStatus.CREATED);
	}

	@GetMapping("/search/id/{musicId}")
	public ResponseEntity<MusicEntity> getMusicById(@PathVariable int musicId) {
		MusicEntity music = musicService.getMusicById(musicId);
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/search/all")
	public ResponseEntity<List<MusicEntity>> getAllMusic() {
		List<MusicEntity> musicList = musicService.getAllMusic();
		return new ResponseEntity<>(musicList, HttpStatus.OK);
	}
	
	@GetMapping("/search/title/{musicTitle}")
	public ResponseEntity<List<MusicEntity>> getMusicByName(@PathVariable String musicTitle) {
	List<MusicEntity> music = musicService.getMusicByName(musicTitle);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	@GetMapping("/search/genre/{musicGenre}")
	public ResponseEntity<List<MusicEntity>> getMusicByGenre(@PathVariable String musicGenre) {
		List<MusicEntity> music = musicService.getMusicByGenre(musicGenre);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	@GetMapping("/search/artist/{musicArtist}")
	public ResponseEntity<List<MusicEntity>> getMusicByArtist(@PathVariable String musicArtist) {
		List<MusicEntity> music = musicService.getMusicByArtist(musicArtist);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	@GetMapping("/search/year/{musicYear}")
	public ResponseEntity<List<MusicEntity>> getMusicByYear(@PathVariable Long musicYear) {
		List<MusicEntity> music = musicService.getMusicByYear(musicYear);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	 @PutMapping("/update/{musicId}")
	  public ResponseEntity<List<MusicEntity>> updateProduct(@RequestBody MusicEntity musicEntity) 
	  { 
		 List<MusicEntity> music = musicService.updateMusic(musicEntity);
		
		if (music != null) {
			return new ResponseEntity<>(music, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
//	@PutMapping("/update/{musicId}") 
//	public ResponseEntity<?> update(@PathVariable int musicId,@RequestBody MusicEntity musicEntity) {
//		MusicEntity music=null;
//		Optional<MusicEntity>dup=musicService.findById(musicId);
//		//
//		if(dup.isPresent()) {
//			bk=dup.get();
//         bk.setId(book.getId());
//         bk.setName(book.getName()); 
//         bk.setQty(book.getQty());
		 
//			//return ResponseEntity.status(HttpStatus.FOUND).body(brepository.save(bk)); //if the question is to show a status then 
//			return ResponseEntity.ok().body(brepository.save(bk));   //if they have given ok() then do like this only
//			//return new ResponseEntity(brepository.save(bk),null); //this is the basic code for returning with responseenetity
//		}else {
//			return null;
//		}
//		
//		
//	}

// Other endpoints related to music functionality
// ...
}
